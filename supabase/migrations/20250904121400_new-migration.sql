-- Create business/customer management system tables
-- This migration creates the core tables for the business management platform

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create businesses table
CREATE TABLE PUBLIC.BUSINESSES (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    USER_ID UUID NOT NULL,
    NAME TEXT NOT NULL,
    DESCRIPTION TEXT,
    LOGO_URL TEXT,
    EMAIL TEXT,
    PHONE TEXT,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()),
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::TEXT, NOW()),
    CONSTRAINT BUSINESSES_PKEY PRIMARY KEY (ID),
    CONSTRAINT BUSINESSES_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES AUTH.USERS(ID)
);

-- Create customers table
CREATE TABLE PUBLIC.CUSTOMERS (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    USER_ID UUID,
    NAME TEXT NOT NULL,
    SURNAME TEXT NOT NULL,
    EMAIL TEXT NOT NULL,
    PHONE TEXT,
    CREATED_AT TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    BUSINESS_ID UUID,
    FINGERPRINT TEXT,
    CONSTRAINT CUSTOMERS_PKEY PRIMARY KEY (ID),
    CONSTRAINT CUSTOMERS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES AUTH.USERS(ID),
    CONSTRAINT CUSTOMERS_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID)
);

-- Create documents table
CREATE TABLE PUBLIC.DOCUMENTS (
    ID UUID NOT NULL DEFAULT UUID_GENERATE_V4(),
    FILENAME TEXT NOT NULL,
    ORIGINAL_NAME TEXT NOT NULL,
    UPLOADED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    USER_ID UUID,
    CONSTRAINT DOCUMENTS_PKEY PRIMARY KEY (ID),
    CONSTRAINT DOCUMENTS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES AUTH.USERS(ID)
);

-- Create customer_sessions table
CREATE TABLE PUBLIC.CUSTOMER_SESSIONS (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    USER_ID UUID,
    EMAIL TEXT NOT NULL,
    NAME TEXT NOT NULL,
    SURNAME TEXT NOT NULL,
    PHONE TEXT,
    STATUS TEXT DEFAULT 'in_progress'::TEXT,
    CREATED_AT TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    UPDATED_AT TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    CUSTOMER_ID UUID,
    BUSINESS_ID UUID,
    CONSTRAINT CUSTOMER_SESSIONS_PKEY PRIMARY KEY (ID),
    CONSTRAINT CUSTOMER_SESSIONS_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID),
    CONSTRAINT CUSTOMER_SESSIONS_CUSTOMER_ID_FKEY FOREIGN KEY (CUSTOMER_ID) REFERENCES PUBLIC.CUSTOMERS(ID),
    CONSTRAINT CUSTOMER_SESSIONS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES AUTH.USERS(ID)
);

-- Create customer_answers table
CREATE TABLE PUBLIC.CUSTOMER_ANSWERS (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    SESSION_ID UUID,
    BUSINESS_ID UUID NOT NULL,
    ANSWERS JSONB NOT NULL,
    ANSWERED_AT TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    USER_ID UUID,
    QUESTION_ID UUID,
    CONSTRAINT CUSTOMER_ANSWERS_PKEY PRIMARY KEY (ID),
    CONSTRAINT CUSTOMER_ANSWERS_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID),
    CONSTRAINT CUSTOMER_ANSWERS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES AUTH.USERS(ID),
    CONSTRAINT CUSTOMER_ANSWERS_SESSION_ID_FKEY FOREIGN KEY (SESSION_ID) REFERENCES PUBLIC.CUSTOMER_SESSIONS(ID)
);

-- Create analyzed_results table
CREATE TABLE PUBLIC.ANALYZED_RESULTS (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    FILE_ID UUID,
    USER_ID UUID,
    QUESTIONS JSONB,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    BUSINESS_ID UUID,
    CONSTRAINT ANALYZED_RESULTS_PKEY PRIMARY KEY (ID),
    CONSTRAINT ANALYZED_RESULTS_FILE_ID_FKEY FOREIGN KEY (FILE_ID) REFERENCES PUBLIC.DOCUMENTS(ID),
    CONSTRAINT ANALYZED_RESULTS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES AUTH.USERS(ID),
    CONSTRAINT ANALYZED_RESULTS_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID)
);

-- Create business_knowledge table
CREATE TABLE PUBLIC.BUSINESS_KNOWLEDGE (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    BUSINESS_ID UUID NOT NULL,
    CONTENT TEXT NOT NULL,
    ADDED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT BUSINESS_KNOWLEDGE_PKEY PRIMARY KEY (ID),
    CONSTRAINT BUSINESS_KNOWLEDGE_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID)
);

-- Create pricing table
CREATE TABLE PUBLIC.PRICING (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    BUSINESS_ID UUID NOT NULL,
    HEADLINE TEXT NOT NULL,
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    PRICE NUMERIC,
    CONSTRAINT PRICING_PKEY PRIMARY KEY (ID),
    CONSTRAINT PRICING_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID)
);

-- Create website_sources table
CREATE TABLE PUBLIC.WEBSITE_SOURCES (
    ID UUID NOT NULL DEFAULT GEN_RANDOM_UUID(),
    BUSINESS_ID UUID NOT NULL,
    URL TEXT NOT NULL,
    ADDED_AT TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT WEBSITE_SOURCES_PKEY PRIMARY KEY (ID),
    CONSTRAINT WEBSITE_SOURCES_BUSINESS_ID_FKEY FOREIGN KEY (BUSINESS_ID) REFERENCES PUBLIC.BUSINESSES(ID)
);

-- Create indexes for better performance
CREATE INDEX IDX_BUSINESSES_USER_ID ON PUBLIC.BUSINESSES(USER_ID);

CREATE INDEX IDX_CUSTOMERS_BUSINESS_ID ON PUBLIC.CUSTOMERS(BUSINESS_ID);

CREATE INDEX IDX_CUSTOMERS_EMAIL ON PUBLIC.CUSTOMERS(EMAIL);

CREATE INDEX IDX_CUSTOMER_SESSIONS_BUSINESS_ID ON PUBLIC.CUSTOMER_SESSIONS(BUSINESS_ID);

CREATE INDEX IDX_CUSTOMER_SESSIONS_CUSTOMER_ID ON PUBLIC.CUSTOMER_SESSIONS(CUSTOMER_ID);

CREATE INDEX IDX_CUSTOMER_ANSWERS_BUSINESS_ID ON PUBLIC.CUSTOMER_ANSWERS(BUSINESS_ID);

CREATE INDEX IDX_CUSTOMER_ANSWERS_SESSION_ID ON PUBLIC.CUSTOMER_ANSWERS(SESSION_ID);

CREATE INDEX IDX_ANALYZED_RESULTS_BUSINESS_ID ON PUBLIC.ANALYZED_RESULTS(BUSINESS_ID);

CREATE INDEX IDX_ANALYZED_RESULTS_FILE_ID ON PUBLIC.ANALYZED_RESULTS(FILE_ID);

CREATE INDEX IDX_BUSINESS_KNOWLEDGE_BUSINESS_ID ON PUBLIC.BUSINESS_KNOWLEDGE(BUSINESS_ID);

CREATE INDEX IDX_PRICING_BUSINESS_ID ON PUBLIC.PRICING(BUSINESS_ID);

CREATE INDEX IDX_WEBSITE_SOURCES_BUSINESS_ID ON PUBLIC.WEBSITE_SOURCES(BUSINESS_ID);